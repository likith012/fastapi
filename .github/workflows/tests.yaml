# Workflow for Unit Testing and Code Coverage

name: Testing

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  lint:

    name: Linting and Formatting
    runs-on: ubuntu-latest

    environment:
      name: 'Testing'

    env:
      GITHUB_PAGES_BRANCH: gh-pages

    permissions:
      contents: write
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - uses: psf/black@stable
        with:
          jupyter: true

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

      - name: Run Super-Linter
        uses: github/super-linter@v5
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DISABLE_ERRORS: true
          VALIDATE_ALL_CODEBASE: true
          OUTPUT_FORMAT: html
          OUTPUT_DETAILS: detailed

      - name: Move super-linter report files
        run: |
          mkdir -p super-linter
          ls -l
          mv *.html super-linter/


      - name: Publish super-linter reports to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./super-linter


  test:
    name: Testing
    runs-on: ubuntu-latest
    needs: lint

    environment:
      name: 'Testing'

    env:
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DATABASE_HOSTNAME: ${{ vars.DATABASE_HOSTNAME }}
      DATABASE_USERNAME: ${{ vars.DATABASE_USERNAME }}
      DATABASE_NAME: ${{ vars.DATABASE_NAME }}
      DATABASE_PORT: ${{ vars.DATABASE_PORT }}
      DATABASE_TYPE: ${{ vars.DATABASE_TYPE }}
      DATABASE_DRIVER: ${{ vars.DATABASE_DRIVER }}
      ALGORITHM: ${{ vars.ALGORITHM }}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{ vars.ACCESS_TOKEN_EXPIRE_MINUTES }}

    services:
      postgres:
        image: postgres:13.3
        env:
          POSTGRES_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          POSTGRES_DB: ${{ vars.DATABASE_NAME }}_test # SQLAlchemy configured the same way
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install project dependencies
        run: pip install -r requirements-test.txt

      - name: Run tests and generate code coverage report
        run: |
            cd $GITHUB_WORKSPACE
            pytest --cov-report=xml --cov=app

      - name: Upload coverage report to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload code coverage report as artifact
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report
          path: ./coverage.xml
