# Workflow for Unit Testing and Code Coverage

name: Testing

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  lint:
    name: Formatting and Linting
    runs-on: ubuntu-latest

    environment:
      name: "Testing"

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - uses: psf/black@stable
        with:
          jupyter: true

      # - name: Run Super-Linter
      #   uses: github/super-linter@v5
      #   env:
      #     DEFAULT_BRANCH: main
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     DISABLE_ERRORS: true
      #     VALIDATE_ALL_CODEBASE: true
      #     OUTPUT_DETAILS: detailed

  test:
    name: Testing and Code Coverage
    runs-on: ubuntu-latest
    needs: lint

    environment:
      name: "Testing"

    env:
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DATABASE_HOSTNAME: ${{ vars.DATABASE_HOSTNAME }}
      DATABASE_USERNAME: ${{ vars.DATABASE_USERNAME }}
      DATABASE_NAME: ${{ vars.DATABASE_NAME }}
      DATABASE_PORT: ${{ vars.DATABASE_PORT }}
      DATABASE_TYPE: ${{ vars.DATABASE_TYPE }}
      DATABASE_DRIVER: ${{ vars.DATABASE_DRIVER }}
      ALGORITHM: ${{ vars.ALGORITHM }}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{ vars.ACCESS_TOKEN_EXPIRE_MINUTES }}

    services:
      postgres:
        image: postgres:13.3
        env:
          POSTGRES_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          POSTGRES_DB: ${{ vars.DATABASE_NAME }}_test # SQLAlchemy configured the same way
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install project dependencies
        run: pip install -r requirements-test.txt

      - name: Run tests and generate code coverage report
        run: |
          cd $GITHUB_WORKSPACE
          pytest --cov-report=xml --cov=app

      - name: Upload coverage report to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload code coverage report as artifact
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: ./coverage.xml

  vulnerability-scan:
    name: SCA and SAST
    runs-on: ubuntu-latest
    needs: test

    environment:
      name: "Testing"

    permissions:
      contents: write
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Snyk for Software Composition Analysis
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --all-projects --all-projects-dependencies --create-pull-request --sarif-file-output=snyk.sarif

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

      - name: Run Snyk for continuous monitoring
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
          args: --all-projects --all-projects-dependencies

      - name: Download code coverage reports for SonarCloud
        uses: actions/download-artifact@v2
        with:
          name: coverage-report
          path: ./coverage-report

      - name: SonarCloud Scan for Static Application Security Testing
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: vulnerability-scan

    if: ${{ false }} # Disable this single-platform build

    environment:
      name: "Testing"

    env:
      APP_NAME: fastapi-docker
      APP_VERSION: ${{ github.sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN}}

      - name: Build and push docker image
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ env.APP_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  multi-platform-build:
    name: Build and Push Multi-platform Docker Image
    runs-on: ubuntu-latest
    needs: vulnerability-scan

    environment:
      name: "Testing"

    env:
      APP_NAME: fastapi-docker
      APP_VERSION: ${{ github.sha }}
      BUILD_CONTEXT: .
      DOCKERFILE: ./Dockerfile

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v2

      - name: Setup docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Restore Docker Buildx cache
        uses: actions/cache@v2
        with:
          path: ~/.docker
          key: ${{ runner.os }}-buildx-${{ hashFiles('**/Dockerfile') }}

      - name: Login to docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN}}

      - name: Build and push Docker images
        run: |
          docker buildx create --use --name mybuilder
          docker buildx build --platform linux/amd64,linux/arm64 --push -t ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest --file ${{ env.DOCKERFILE }} ${{ env.BUILD_CONTEXT }}
          docker buildx stop mybuilder
          docker buildx rm mybuilder

      - name: Save Docker Buildx cache
        uses: actions/cache@v2
        with:
          path: ~/.docker
          key: ${{ runner.os }}-buildx-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-buildx-
